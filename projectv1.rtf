{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red160\green0\blue163;\red128\green63\blue122;\red86\green132\blue173;\red109\green109\blue109;\red152\green54\blue29;
\red254\green187\blue91;\red117\green114\blue185;\red88\green118\blue71;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c62745\c0\c63922;\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c59608\c21176\c11373;
\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c34510\c46275\c27843;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 import \cf4 cv2\
\
\cf2 import \cf4 mediapipe \cf2 as \cf4 mp\
\
\cf2 import \cf4 os\
\
\cf2 import \cf4 tkinter\
\
\cf2 import \cf4 PIL.Image\cf2 , \cf4 PIL.ImageTk\
\cf2 import \cf4 numpy \cf2 as \cf4 np\
\
mp_drawing = mp.solutions.drawing_utils\
\
mp_pose = mp.solutions.pose\
\
\
\cf2 class \cf4 App:\
    \cf2 def \cf5 __init__\cf4 (\cf6 self\cf2 , \cf4 window\cf2 , \cf4 window_title\cf2 , \cf4 video_source=\cf7 0\cf4 ):\
        \cf6 self\cf4 .window = window\
        \cf6 self\cf4 .window.title(window_title)\
        \cf6 self\cf4 .video_source = video_source\
\
        \cf8 # open video source (by default this will try to open the computer webcam)\
        \cf6 self\cf4 .vid = MyVideoCapture(\cf6 self\cf4 .video_source)\
\
        \cf8 # Create a canvas that can fit the above video source size\
        \cf6 self\cf4 .canvas = tkinter.Canvas(window\cf2 , \cf9 width\cf4 =\cf6 self\cf4 .vid.width\cf2 , \cf9 height\cf4 =\cf6 self\cf4 .vid.height)\
        \cf6 self\cf4 .canvas.pack()\
\
        \cf8 # # Button that lets the user take a snapshot\
        # self.btn_snapshot = tkinter.Button(window, text="Button", width=50, command=self.snapshot)\
        # self.btn_snapshot.pack(anchor=tkinter.CENTER, expand=True)\
\
        # After it is called once, the update method will be automatically called every delay milliseconds\
        \cf6 self\cf4 .delay = \cf7 1\
        \cf6 self\cf4 .update()\
\
        \cf8 # ret, frame = self.vid.get_frame()\
        #\
        # cv2.imshow('Feed', frame)\
\
        \cf6 self\cf4 .window.mainloop()\
\
    \cf2 def \cf10 update\cf4 (\cf6 self\cf4 ):\
        \cf8 # Get a frame from the video source\
        \cf4 ret\cf2 , \cf4 frame = \cf6 self\cf4 .vid.get_pose()\
        \cf2 if \cf4 ret:\
            \cf6 self\cf4 .photo = PIL.ImageTk.PhotoImage(\cf9 image\cf4 =PIL.Image.fromarray(frame))\
            \cf6 self\cf4 .canvas.create_image(\cf7 0\cf2 , \cf7 0\cf2 , \cf9 image\cf4 =\cf6 self\cf4 .photo\cf2 , \cf9 anchor\cf4 =tkinter.NW)\
            \cf6 self\cf4 .window.after(\cf6 self\cf4 .delay\cf2 , \cf6 self\cf4 .update)\
\
\
\cf2 class \cf4 MyVideoCapture:\
    \cf2 def \cf5 __init__\cf4 (\cf6 self\cf2 , \cf4 video_source=\cf7 0\cf4 ):\
        \cf8 # Open the video source\
        \cf6 self\cf4 .vid = cv2.VideoCapture(video_source)\
        \cf2 if not \cf6 self\cf4 .vid.isOpened():\
            \cf2 raise \cf11 ValueError\cf4 (\cf12 "Unable to open video source"\cf2 , \cf4 video_source)\
\
        \cf8 # Get video source width and height\
        \cf6 self\cf4 .width = \cf6 self\cf4 .vid.get(cv2.CAP_PROP_FRAME_WIDTH)\
        \cf6 self\cf4 .height = \cf6 self\cf4 .vid.get(cv2.CAP_PROP_FRAME_HEIGHT)\
\
    \cf2 def \cf10 calculate_angle\cf4 (\cf6 self\cf2 , \cf4 a\cf2 , \cf4 b\cf2 , \cf4 c):\
        a = np.array(a)  \cf8 # First\
        \cf4 b = np.array(b)  \cf8 # Mid\
        \cf4 c = np.array(c)  \cf8 # End\
\
        \cf4 radians = np.arctan2(c[\cf7 1\cf4 ] - b[\cf7 1\cf4 ]\cf2 , \cf4 c[\cf7 0\cf4 ] - b[\cf7 0\cf4 ]) - np.arctan2(a[\cf7 1\cf4 ] - b[\cf7 1\cf4 ]\cf2 , \cf4 a[\cf7 0\cf4 ] - b[\cf7 0\cf4 ])\
        angle = np.abs(radians * \cf7 180.0 \cf4 / np.pi)\
\
        \cf2 if \cf4 angle > \cf7 180.0\cf4 :\
            angle = \cf7 360 \cf4 - angle\
\
        \cf2 return \cf4 angle\
\
    \cf2 def \cf10 get_pose\cf4 (\cf6 self\cf4 ):\
        ret\cf2 , \cf4 frame = \cf6 self\cf4 .vid.read()\
        \cf2 if \cf6 self\cf4 .vid.isOpened():\
            \cf2 with \cf4 mp_pose.Pose(\cf9 min_detection_confidence\cf4 =\cf7 0.5\cf2 , \cf9 min_tracking_confidence\cf4 =\cf7 0.5\cf4 ) \cf2 as \cf4 pose:\
                \cf2 if \cf4 ret:\
                    \cf8 # Recolor image RGB\
                    \cf4 image = cv2.cvtColor(frame\cf2 , \cf4 cv2.COLOR_BGR2RGB)\
                    image.flags.writeable = \cf2 False\
\
                    \cf8 # Make pose detection\
                    \cf4 results = pose.process(image)\
\
                    \cf8 # Recolor image back to BGR\
                    \cf4 image.flags.writeable = \cf2 True\
                    \cf4 image = cv2.cvtColor(frame\cf2 , \cf4 cv2.COLOR_RGB2BGR)\
\
                    \cf2 try\cf4 :\
                        landmarks = results.pose_landmarks.landmark\
\
                        \cf8 # Get coordinates\
                        \cf4 shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x\cf2 ,\
                                    \cf4 landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]\
                        elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x\cf2 ,\
                                 \cf4 landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]\
                        wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x\cf2 ,\
                                 \cf4 landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]\
\
                        \cf8 # Calculate angle\
                        \cf4 angle = \cf6 self\cf4 .calculate_angle(shoulder\cf2 , \cf4 elbow\cf2 , \cf4 wrist)\
\
                        \cf11 print\cf4 (angle)\
\
                        \cf8 # Visualize angle\
                        \cf4 cv2.putText(image\cf2 , \cf11 str\cf4 (angle)\cf2 , \cf11 tuple\cf4 (np.multiply(elbow\cf2 , \cf4 [\cf7 640\cf2 , \cf7 480\cf4 ]).astype(\cf11 int\cf4 ))\cf2 ,\
                                    \cf4 cv2.FONT_HERSHEY_SIMPLEX\cf2 , \cf7 0.5\cf2 , \cf4 (\cf7 255\cf2 , \cf7 255\cf2 , \cf7 255\cf4 )\cf2 , \cf7 2\cf2 , \cf4 cv2.LINE_AA)\
                    \cf2 except\cf4 :\
                        \cf2 pass\
\
                    \cf8 # Render detection\
                    \cf4 mp_drawing.draw_landmarks(image\cf2 , \cf4 results.pose_landmarks\cf2 , \cf4 mp_pose.POSE_CONNECTIONS\cf2 ,\
                                              \cf4 mp_drawing.DrawingSpec(\cf9 color\cf4 =(\cf7 245\cf2 , \cf7 117\cf2 , \cf7 66\cf4 )\cf2 , \cf9 thickness\cf4 =\cf7 2\cf2 ,\
                                                                     \cf9 circle_radius\cf4 =\cf7 2\cf4 )\cf2 ,\
                                              \cf4 mp_drawing.DrawingSpec(\cf9 color\cf4 =(\cf7 245\cf2 , \cf7 66\cf2 , \cf7 230\cf4 )\cf2 , \cf9 thickness\cf4 =\cf7 2\cf2 ,\
                                                                     \cf9 circle_radius\cf4 =\cf7 2\cf4 ))\
\
                    \cf8 # Return a boolean success flag and the current frame\
                    \cf2 return \cf4 ret\cf2 , \cf4 image\
                \cf2 else\cf4 :\
                    \cf2 return \cf4 ret\cf2 , None\
        else\cf4 :\
            \cf2 return \cf4 ret\cf2 , None\
\
    \cf8 # Release the video source when the object is destroyed\
    \cf2 def \cf5 __del__\cf4 (\cf6 self\cf4 ):\
        \cf2 if \cf6 self\cf4 .vid.isOpened():\
            \cf6 self\cf4 .vid.release()\
            \cf8 # self.destroyAllWindows()\
\
\
# Create a window and pass it to the Application object\
\cf4 App(tkinter.Tk()\cf2 , \cf12 "Tkinter and OpenCV"\cf4 )\
\
\cf8 # mp_drawing = mp.solutions.drawing_utils\
#\
# mp_pose = mp.solutions.pose\
\
# cap = cv2.VideoCapture(0)\
# while cap.isOpened():\
#     ret, frame = cap.read()\
#     cv2.imshow('Feed', frame)\
#\
#     if cv2.waitKey(10) & 0xFF == ord('q'):\
#         break\
#\
# cap.release()\
# cv2.destroyAllWindows()\
\
}